Logical Operators
 
There are four logical operators in JS: || (OR), &&(AND), ! (NOT), ?? (Nullish Coalescing)
 
Although being called logical they can be applied to any value type, not only boolean. The results can also be of any type.
 
|| (OR):
 
result = a || b;
 
With classical programming, the logical OR is meant to manipulate boolean values only. if any of its arguments are true it returns true, else it returns false.
 
In JS, the operator is a bit trickier and powerful. There are four possible logical combinations:
 
alert( true || true ); // true
alert( false || true ); // true
alert( true || false ); // true
alert( false || false ); // false
 
As shown above the result is always true, except when both operands are false.
 
if an operand is not boolean it is converted to boolean for the evaluation.
 
for example 1 is treated as true and 0 as false:
 
if (1 || 0) { // same as true || false )
	alert( ‘truthy!’ );
}
 
OR is mostly used in if statements to test if any of the given conditions are true, for example:
 
let hour = 9;
 
if (hour < 10 || hour > 18) {
	alert( ‘The office is closed.’ );
}
 
we can use more conditions:
 
let hour = 12;
let isWeekend = true;
 
if (hour < 10 || hour > 18 || isWeekend) {
	alert( ‘The office is closed.’ );
}
 
OR finds the first truthy value:
 
The logical which occurs above is classical, but let’s look at the JS extras now.
 
result = value1 || value2 || value3;
 
The OR operator does the following:
- Evaluates operands left to right.
- For each operand converts it to boolean, if the result is true, stops and returns the original value of that operand.
- if all operands have been evaluated ( all were false for example) the last operand is returned.
 
A value is returned in its original form, without conversion.
 
So OR returns the first truthy value or the last one if no truthy value is found.
 
For example:
 
alert( 1 || 0 ); // 1 is returned
 
alert( null || 1 ); // 1 is returned
alert( null || 0 || 1 ); // 1 is returned
 
alert( undefined || null || 0 ); // 0 is returned as all are false so the last value is returned.
 
Short-circuit evaluation:
 
This means || process all its arguments until the first truthy value is found, then the value is returned immediately, without touching the other arguments.
 
This feature is important for when an operand isn’t just a single value, but an expression with a side effect, such as a variable alignment or function call.
 
example:
 
true || alert(“not printed”); // stops at true
false || alert(“printed); // alerts printed
-------------------------------------------------------------------------------------------------
 
&& (AND):
 
result = a && b;
 
in classical programming AND returns true if both operands are truthy and false otherwise:
 
alert( true && true ); // true
alert ( false && true ); // false
alert ( true && false ); // false
alert ( false && false ); // false
 
example with if:
 
let hour = 12;
let minute = 30;
 
if (hour == 12 && minute == 30) {
	alert(  `The time is ${hour}:${minute}`  );
}
 
just like OR any value is allowed as an operand of AND.
 
AND finds the first falsy value:
 
result = value1 && value2 && value3;
 
The AND operator does the following:
- Evaluates operands from left to right.
- For each operand converts it to a boolean. if the result is false, stops and returns the original value of that operand.
- If all operands have been evaluated ( all were truthy etc.) returns the last operand.
 
AND returns the first falsy value or the last value if none were found.
 
The rules are similar to OR, the difference being that the first valued returned is falsy instead of truthy.
 
Example:
 
// the first operand is truthy, AND returns the last/second operand.
alert( 1 && 0 ); // 0
alert( 1 && 5 ); // 5
 
// the first operand is falsy, AND returns it. the second operand is ignored.
alert( null && 5 ); // null
alert( 0 && “no matter what” ); // 0
 
serval values in a row can also be passed, the first falsy is returned:
alert( 1 && 2 && null && 3 ); // null
 
when all values are truthy the last value is returned:
alert( 1 && 2 && 3 ); // 3
 
The precedence of AND is higher than OR:
 
so a && b || c && d is basically the same if the && expressions were in parentheses: ( a && b ) || ( c && b).
 
Don’t replace if with || or &&. sometimes people use && as a shorter way to write if, for example:
 
let x = 1;
 
(x > 0) && alert( “Greater than zero!” );
 
The action in the right party of && would only execute if the evaluation reaches it, only if x > 0 is true.
 
But using if makes it more obvious and readable than using && for if statements, so use if for if statements and && for AND.
-------------------------------------------------------------------------------------------------
 
! (NOT):
 
result = !value;
 
The operator accepts a single argument and does the following:
- Converts operand to boolean type.
- Returns the inverse value.
 
For example:
 
alert( !true ); // false
alert( !0 ); // true
 
A double NOT is sometimes used for converting a value to boolean :
 
alert( !!”non-empty string” ); // true
alert( !!null ); // false
 
The first NOT converts the value to boolean and returns the inverse, the same for the second NOT. here we have a plain value-to-boolean conversion.
 
we can also do this using the boolean function:
 
alert( Boolean(“non-empty string”) ); // true
alert( Boolean(null) ); // false
 
The precedence of NOT ! is the highest of all logical operators, so it always executes first, before && or ||.
 
 
Write an if condition to check that age is NOT between 14 and 90 inclusively.
Create two variants: the first one using NOT !, the second one – without it.
 
login task:
 
let login = prompt("login:");
if (login == "Admin") {
  let passWord = prompt("Password:");
  if (passWord == "TheMaster") {
    alert("Welcome!");
  } else if (passWord == null || passWord == "") {
    alert("cancelled")
  } else {
    alert("wrong password")
  }
} else if (login == null || login == "") {
  alert("cancelled");
} else {
  alert("I don't know you");
}