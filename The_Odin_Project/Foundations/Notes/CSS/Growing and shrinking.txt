Introduction:
 
Let’s look at what actually happens when we put flex: 1 on flex items.
 
Overview:
 
- We’ll learn the 3 properties that are defined by the flex shorthand, and how to use them individually.
-------------------------------------------------------------------------------------------------
 
The flex shorthand:
 
The flex declaration is actually a shorthand for 3 properties that you can set on a flex item. These properties affect how flex items size themselves within their container.
 
Shorthand properties are CSS properties that let us set the values of multiple other CSS properties simultaneously. 
Using a shorthand property, you can write more concise ( and often more readable) stylesheets, saving time and energy.
 
In this can flex is a shorthand for flex-grow, flex-shrink and flex-basis.
Example:
 
div {
	flex: 1;
}
 
In the example above, flex: 1 equates to flex-grow: 1, flex-shrink: 1, flex-basis: 0.
 
We will see the flex shorthand defined with only one value often. In that case, the value is applied to flex-grow. so when we set flex: 1 on our divs, we were actually specifying a shorthand of flex: 1 1 0.
 
Flex-grow:
 
flex-grow expects a single number as its value, and that number is used as the flex-item’s growth factor. When we applied flex: 1 to every div inside our container, we were telling every div to grow the same amount. 
The result of this is that every div ends up the exact same size. If we add flex: 2 to just one div it would grow 2x the size of the others.
 
Flex-shrink:
 
flex-shrink is similar to flex-grow, but sets the shrink factor of a flex item. flex-shrink only ends up being applied if the size of all flex items is larger than their parent container. 
For example: if we have 3 divs with a set width of 100px each, and the container was smaller than 300px, the divs would have to shrink to fit.
 
The default shrink factor is flex-shrink: 1, meaning all items will shrink evenly. if we don’t want an item to shrink we can set flex-shrink: 0. 
we can also use higher numbers to make certain items shrink at a higher rate than  normal.
 
Flex-basis:
 
flex-basis sets the initial size of a flex item, so any sort of flex-growing or flex-shrinking starts from the baseline size. The shorthand value defaults to flex-basis: 0%. 
Using auto as a flex-basis tells the item to check for a width declaration.
 
There is a difference between the default value of flex-basis and the way flex shorthand defines it if no flex-basis is given. 
The actual default value for flex-basis is auto, but when specifying flex: 1 on an element, it sets that as flex: 1 1 0. flex: 1 1 auto is equivalent to flex: auto.
 
In practice we will likely not be using complex values for flex-grow, flex-shrink or flex-basis. 
generally we are most likely to use declarations like flex: 1; to make divs grow evenly and flex-shrink: 0 to keep certain divs from shrinking.

Example of flexbox:

HTML -
<div class="flex-container">
    <div class="one"></div>
    <div class="two"></div>
    <div class="three"></div>
</div>

CSS -
.flex-container {
    display: flex;
}

.flex-container div {
    background: peachpuff;
    border: 4px solid brown;
    height: 100px;
    flex: 1;
}