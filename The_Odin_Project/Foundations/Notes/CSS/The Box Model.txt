Introduction:
 
The most important skills we need to master with CSS are positioning and layout. Changing fonts and colours is a crucial skill, but being able to put things exactly where we want them on a webpage is even more crucial. We can’t really find webpages where every element is just stacked one on top of another.
 
Learning to position elements isn’t that hard once we understand a few key concepts. Skipping this and going straight to JS is meaningless if we can’t stick our elements where we want them on our webpage.
 
Overview:
 
- we will learn about box model
- we will learn to make sure elements are just the right size with margin, padding, borders.
-------------------------------------------------------------------------------------------------
 
The box model:
 
This is the first important concept we must understand to be successful in CSS.
 
Every single thing on a webpage is a rectangular box. These boxes can have other boxes in them, and can sit alongside one another.
 
When get a rough idea of how this works by adding an outline to every element on the webpage:
 
* {
	outline: 2px solid red;
}
 
There are many ways to manipulate the size of these boxes, and the space between them, using padding, margin and border.
 
- Padding increases the space between the content of a box and the borders of adjacent boxes.
- Margin increases the space between the borders of a box and the borders of adjacent boxes
- Border adds space (even if its only a pixel or two) between the margin and the padding.
 
Box Model Video:
 
Margin collapses in the box model, so if both elements have a set margin of sixty the margin between them won’t be 120 but 60. if the margin between both is different, the larger one will be used.
 
The best way to space to elements is by using margin, and padding to space an element from itself.
 
The actual height of an element in css is the elements defined height plus top and bottom padding plus top and bottom border. same goes for width.
 
using box-sizing: border-box will makes height and width account for padding and border.
Example:
padding: 10px
border: 20px
set height: 100
set width: 100
now the actual element size will be 40x40
-------------------------------------------------------------------------------------------------

CSS-TRICKS:
 
Using auto on the margin means the browser will define the margin for you. in most cases the value of auto is 0, or whatever space is available on that side of the element. Auto is useful for for horizontal centering:
 
.container {
	width: 980px;
	margin: 0 auto;
}
 
With the example above two things are done to center the element.
- A specific width is given
- The left and right margins are set to auto
Without the specified width the auto values would have no effect, setting the left and right margins to0 or else to whatever is the available space inside the parent element.
 
This does no work vertically but only horizontally.
 
When margins collapse the largest value always is used, even for nested elements. if we have div with a paragraph in it both having a set margin, the largest margin will be used.
 
Negative margins:
 
While positive margins push elements away, negative margins pull elements.
 
Display property:
 
block - takes all the space available
inline - takes up the least amount of space possible (can’t set width and height)
inline-block - is the same as inline but allows you to set the width and height of an element
none - makes the element disappear as if it doesn’t exist
