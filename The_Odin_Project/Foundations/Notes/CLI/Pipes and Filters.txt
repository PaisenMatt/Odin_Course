
(directory: Desktop/odin-lessons/Cli/shell-lesson-data/exerecise-data/alkanes)

The files in the current directory are in .pdb format which is protein Data Bank Format, a simple text format that specifies the type and position of each atom in the molecule.

wc cubane.pdb:
20 156 1158 cubane.pdb

wc is the word count command: it counts the number of lines, words and characters in files. returning files in order left to right.

running wc *.pdb will return the line, word and character count of every file with the .pdb extension:
20 156 1158 cubane.pdb
12 84 622 ethane.pdb
9 57 422 methane.pdb
30 246 1828 octane.pdb
21 165 1226 pentane.pdb
15 111 825 propane.pdb
107 819 6081 total

wc *.pdb also shows the total number of all lines in the last line of output.

wc -l *.pdb will only return the number of lines:
20 cubane.pdb
12 ethane.pdb
9 methane.pdb
30 octane.pdb
21 pentane.pdb
15 propane.pdb
107 total

the -m and -w options can also be used with wc to show only the number of chracters or number of words.

wc -l by itself without a given file will do nothing and just sit there waiting, if this happens by accident press Ctrl+C to exit the command.

----------------------------------------------------------------------------------------------------

Capturing output from commands:

Finding which file contains the fewest lines is easy our directory, but if we worked with more files such as 6000 we would have to do something else:

first run wc -l *.pdb > lengths.txt

The > symbol, tells the shell to redirect the commandÂ´s output to a file instead of printing it on screen. so the output will be writtn into lengths.txt, if there isnt an already exiting file shell will create the file otherwise it will overwrite the already existing file, this can cause data loss. therefore redirecting commands is to be done with caution.

To view the contents of lengths.txt we use cat lengths.txt:
20 cubane.pdb
12 ethane.pdb
9 methane.pdb
30 octane.pdb
21 pentane.pdb
15 propane.pdb
107 total

the cat command, means concatenate meaning join together, and it prints the contents of files one after another.

Here we will be using cat, for conveniece and consistency, but it has the disadvantge that it always dumps the whole file onto your screen. In practice less is more useful (less lengths.txt etc.). This displays a screenful of the files, and then stops. You can go foward one screenful by pressing the spacebar, or back one by pressing b. press q to quit.

-----------------------------------------------------------------------------------------------------

(directory: Desktop/odin-lessons/Cli/shell-lesson-data/exerecise-data/alkanes)

Filtering output:

using the sort command to sort the contents of the lengths.txt file.

first we practice using the numbers.txt file in exercise-data directory.

cat ../numbers.txt:
10
2
19
22
6

now run sort on it, sort ../numbers.txt:
10
19
2
22
6

sort -n ../numbers.txt gives:
2
6
10
19
22

-n specifies a numerical sort instead of an alphanumerical one.

we will now use this with the lengths.txt, this doesnt alter the file but sends the sorted results to the screen.

sort -n lengths.txt:
9 methane.pdb
12 ethane.pdb
15 propane.pdb
20 cubane.pdb
21 pentane.pdb
30 octane.pdb
107 total

Now we can put the sorted list of lines into a temporary file called sorted-lengths.txt.

sort -n lengths.txt > sorted-lengths.txt

once that is done, we run another command called head to get the first few lines in sorted-lengths.txt:

head -n 1 sorted-lengths.txt:
output: 9 methane.pdb

Using -n 1 with head tells the command that we only want the first line of the file, for the first 3 we would use -n 3 etc. since sorted-lengths.txt is in order of least to greatest number of lines, the output of head must be the file with fewest lines.

Redirecting a file to itself is not a good idea as it can remove or delete data or produce incorrect data.
example: sort -n lengths.txt > lengths.txt

The echo command prints text in shell.

echo hello > testfile01.txt will create a file called testfile01.txt with hello in it. and when it is used again will overwrite the already existing file.

echo hello >> testfile02.txt will create a file called testfile02.txt with hello in it. and when used again it will append the new data to the existing file.

Appending data:

(file: Desktop/odin-lessons/Cli/shell-lesson-data/exerecise-data/animal-counts/animals.csv)

the tail command is similar to the head command but instead prints the line from the end of a file instead.

head -n 3 animals.csv > animals-subset.csv
tail -n 2 animals.csv > animals-subset.csv

will give the first three lines and the two last lines of animals.csv

--------------------------------------------------------------------------------------------------------------

Passing output to another command:

in the example of finding the file with the fewest lines, we are using two intermediate files lengths.txt and sorted-lengths.txt to store output. This is a confusing way to work because even once you understand what wc, sort, and head do, those intermidate files make it hard to follow whats going on. We make this easier to understand by running sort and head together:

sort -n lengths.txt | head -n 1
output: 9 methane.pdb

the vertical bar, |, between the two commands is called a pipe. it tells the shell that we want to use the output of the command on the left as the input to the command on the right.

This has removed the need for the sorted-lengths.txt file.

---------------------------------------------------------------------------------------------------------------

(directory: Desktop/odin-lessons/Cli/shell-lesson-data/exerecise-data/alkanes)

Combining multiple commands:

pipes can be chained consecutively. for example we can send the output of wc directly to sort, and then send that output to head. This removes the need for any intermediate files.

wc -l *.pdb | sort -n
output: 
9 methane.pdb
12 ethane.pdb
15 propane.pdb
20 cubane.pdb
21 pentane.pdb
30 octane.pdb
107 total

now we send that output to head.

wc -l *.pdb | sort -n | head -n 1
output:
9 methane.pdb

This is exactly like a mathematician nesting function like log(3x) and saying "the log of three times x". in our situation, the algorithm is "head of sort of line count of  *.pdb"

----------------------------------------------------------------------------------------------------------------

Tools designed to work together:

filters are commands like wc and sort that transform a stream of input into a stream of output.
pipes is connecting commands to work together.

(file: Desktop/odin-lessons/Cli/shell-lesson-data/exerecise-data/animal-counts/animals.csv)

pipe reading comprehension task:

cat animals.csv | head -n 5 | tail -n 3 | sort -r > final.txt
output in final.txt: 
2012-11-06, rabbit, 19
2012-11-06, deer, 2
2012-11-05, raccoon, 7

the pipe command above takes the first 5 lines, then the last 3 lines of those 5 lines from animals.csv and writes it to a file named final.txt in reverse order.

pipe construction:

cut -d , -f 2 animals.csv
output:
deer
rabbit
raccoon
rabbit
deer
fox
rabbit
bear

the command above uses the cut function which cuts out certain sections of each line of the file, cut expects lines to be seperated into columns by a tab character. this character is called a delimiter. with the command above the -d option is used to specify the comma as the delimiter character. then we also used -f to specifiy what to extract, that being the second column.

the uniq command removes duplicates.
cut -d , -f 2 animals.csv | sort | uniq
output:
bear
deer
fox
rabbit 
raccoon

the -c opition in uniq tells us how many times a line was repeated.
cut -d , -f 2 animals.csv | sort | uniq -c
output:
1 bear
2 deer
1 fox
3 rabbit 
1 raccoon

--------------------------------------------------------------------------------------------------------------

Key points:

- wc counts lines, words, and characters in its inputs.
- cat displays the contents of its inputs
- sort sorts its inputs
- head displays the first 10 lines of its inputs.
- tail displays the last 10 lines of its inputs.
- command > (file) redirects a command's output to a file (overwriting any existing content)
- command >> (file) appends a command's output to a file.
- (first) | (second) is a pipeline: the output of the first command is used as the input of the second.
- the best way to use the shell is to use pipes to combine simple single-purpose programs (filters).




































